'use client';

import React, { useState, useEffect } from 'react';
import ReactMarkdown from 'react-markdown';
import remarkGfm from 'remark-gfm';
import remarkMath from 'remark-math';
import rehypeKatex from 'rehype-katex';
import rehypeRaw from 'rehype-raw';
import rehypeSanitize from 'rehype-sanitize';
import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';
import { oneLight } from 'react-syntax-highlighter/dist/cjs/styles/prism';
import { vscDarkPlus } from 'react-syntax-highlighter/dist/cjs/styles/prism';
import Image from 'next/image';
import Link from 'next/link';
import 'katex/dist/katex.min.css';
import { convertToGitHubCompatible } from '@/utils/inlineStylesConverter';

// Types for react-markdown component props
type CodeBlockProps = {
  node?: any;
  inline?: boolean;
  className?: string;
  children?: React.ReactNode;
};

type ImageProps = {
  node?: any;
  src?: string;
  alt?: string;
};

interface MarkdownRendererProps {
  content: string;
  className?: string;
  fullScreen?: boolean;
  maxHeight?: string;
  defaultLayout?: 'grid' | 'flow';
  defaultGridColumns?: 1 | 2 | 3;
}

type GridColumns = 1 | 2 | 3;

// Import markdown-grid styles
import '../styles/markdown-grid-new.css';

const MarkdownRenderer: React.FC<MarkdownRendererProps> = ({ 
  content, 
  className = '',
  fullScreen = true, // Default to fullscreen for better GitHub-like experience
  maxHeight = 'max-h-[85vh]',
  defaultLayout = 'grid',
  defaultGridColumns = 2
}) => {
  const [isFullscreen, setIsFullscreen] = useState(fullScreen);
  const [isDarkTheme, setIsDarkTheme] = useState(false);
  const [isGithubStyle, setIsGithubStyle] = useState(true); // Always use GitHub style by default
  const [sidebarOpen, setSidebarOpen] = useState(false);
  const [useGridLayout, setUseGridLayout] = useState(defaultLayout === 'grid'); // Use the default layout
  const [gridColumns, setGridColumns] = useState<GridColumns>(defaultGridColumns); // Default number of columns
  const [equalHeight, setEqualHeight] = useState(true); // Make widgets have equal height
  
  // Check for dark mode preference
  useEffect(() => {
    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
    setIsDarkTheme(mediaQuery.matches);

    const handler = (e: MediaQueryListEvent) => setIsDarkTheme(e.matches);
    mediaQuery.addEventListener('change', handler);
    return () => mediaQuery.removeEventListener('change', handler);
  }, []);
  
  // Also check for any class-based dark mode on the document
  useEffect(() => {
    const checkDarkMode = () => {
      const isDark = document.documentElement.classList.contains('dark');
      setIsDarkTheme(isDark);
    };
    
    checkDarkMode();
    
    // Set up a mutation observer to detect changes to the html element's classes
    const observer = new MutationObserver(checkDarkMode);
    observer.observe(document.documentElement, { 
      attributes: true, 
      attributeFilter: ['class'] 
    });
    
    return () => observer.disconnect();
  }, []);
  
  const toggleFullscreen = () => {
    setIsFullscreen(!isFullscreen);
    // Close sidebar when entering fullscreen
    if (!isFullscreen) {
      setSidebarOpen(false);
    }
  };

  const toggleStyle = () => {
    setIsGithubStyle(!isGithubStyle);
  };

  const toggleDarkMode = () => {
    const newDarkMode = !isDarkTheme;
    setIsDarkTheme(newDarkMode);
    
    // Update document class for dark mode
    if (newDarkMode) {
      document.documentElement.classList.add('dark');
    } else {
      document.documentElement.classList.remove('dark');
    }
  };

  const toggleSidebar = () => {
    setSidebarOpen(!sidebarOpen);
  };
  
  // GitHub-style wrapper classNames
  const githubWrapperClasses = isGithubStyle 
    ? 'bg-white dark:bg-[#0d1117] border border-gray-300 dark:border-gray-700 rounded-md shadow-sm w-full' 
    : '';
  
  // GitHub-style content classNames
  const githubContentClasses = isGithubStyle 
    ? 'p-8 font-[system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Helvetica,Arial,sans-serif,Apple Color Emoji,Segoe UI Emoji] text-[16px] md:text-[18px]' 
    : '';
  // Prepare the content with GitHub-compatible approach
  const prepareGithubCompatibleContent = (content: string): string => {
    let processedContent = content;
    
    // Find all GitHub widget patterns (stats, languages, trophies, streak)
    // Match both regular markdown images and images inside HTML with align attributes
    const markdownWidgetRegex = /!\[([^\]]+)\]\((https:\/\/(?:github-readme-stats\.vercel\.app|github-profile-trophy\.vercel\.app|github-readme-streak-stats\.herokuapp\.com)[^)]+)\)/g;
    const htmlWidgetRegex = /<div[^>]*align=["'](?:center|left|right)["'][^>]*>\s*<img[^>]*src=["'](https:\/\/(?:github-readme-stats\.vercel\.app|github-profile-trophy\.vercel\.app|github-readme-streak-stats\.herokuapp\.com)[^"']+)["'][^>]*alt=["']([^"']+)["'][^>]*>\s*<\/div>/gi;
    
    const widgets: Array<{alt: string, src: string, title: string, type: 'stats' | 'languages' | 'trophy' | 'streak', isHtml?: boolean}> = [];
    
    // Extract widget info from markdown content
    let match;
    while ((match = markdownWidgetRegex.exec(content)) !== null) {
      // Determine widget type and title based on URL
      let title = 'GitHub Stats';
      let type: 'stats' | 'languages' | 'trophy' | 'streak' = 'stats';
      
      if (match[2].includes('top-langs')) {
        title = 'Top Languages';
        type = 'languages';
      } else if (match[2].includes('github-profile-trophy')) {
        title = 'GitHub Trophies';
        type = 'trophy';
      } else if (match[2].includes('streak-stats')) {
        title = 'Contribution Streak';
        type = 'streak';
      }
      
      widgets.push({
        alt: match[1],
        src: match[2],
        title,
        type,
        isHtml: false
      });
    }
    
    // Extract widget info from HTML content
    while ((match = htmlWidgetRegex.exec(content)) !== null) {
      const src = match[1];
      const alt = match[2];
      
      // Determine widget type and title based on URL
      let title = 'GitHub Stats';
      let type: 'stats' | 'languages' | 'trophy' | 'streak' = 'stats';
      
      if (src.includes('top-langs')) {
        title = 'Top Languages';
        type = 'languages';
      } else if (src.includes('github-profile-trophy')) {
        title = 'GitHub Trophies';
        type = 'trophy';
      } else if (src.includes('streak-stats')) {
        title = 'Contribution Streak';
        type = 'streak';
      }
      
      widgets.push({
        alt,
        src,
        title,
        type,
        isHtml: true
      });
    }
    
    // If we have multiple widgets and grid layout is enabled, organize them into a table
    if (widgets.length > 0 && useGridLayout) {
      // Remove the original widget images (both markdown and HTML format)
      processedContent = processedContent.replace(markdownWidgetRegex, '');
      processedContent = processedContent.replace(htmlWidgetRegex, '');
      
      // Separate trophies (full width) from other widgets
      const trophyWidgets = widgets.filter(w => w.type === 'trophy');
      const regularWidgets = widgets.filter(w => w.type !== 'trophy');
      
      let content = '\n\n';
      
      // First display any trophy widgets (full width)
      if (trophyWidgets.length > 0) {
        trophyWidgets.forEach(widget => {
          // Use HTML with align attribute for better centering (GitHub supports this)
          content += `<div align="center">\n\n`;
          content += `## ${widget.title}\n\n`;
          content += `![${widget.alt}](${widget.src})\n\n`;
          content += `</div>\n\n`;
        });
      }
      
      // Then display regular widgets in a grid
      if (regularWidgets.length > 0) {
        const cols = gridColumns; // Number of columns (1-3)
        
        if (cols === 1) {
          // For single column, use centered divs
          regularWidgets.forEach(widget => {
            content += `<div align="center">\n\n`;
            content += `### ${widget.title}\n\n`;
            content += `![${widget.alt}](${widget.src})\n\n`;
            content += `</div>\n\n`;
          });
        } else {
          // For multiple columns, use markdown tables
          // Process regular widgets in batches of 'cols'
          for (let i = 0; i < regularWidgets.length; i += cols) {
            const rowWidgets = regularWidgets.slice(i, i + cols);
            
            // Create the table header with titles
            content += '| ' + rowWidgets.map(w => w.title).join(' | ') + ' |\n';
            
            // Create the alignment row
            content += '|' + Array(rowWidgets.length).fill(':---:').join('|') + '|\n';
            
            // Add the image content
            content += '| ' + rowWidgets.map(w => `![${w.alt}](${w.src})`).join(' | ') + ' |\n\n';
          }
        }
      }
      
      // Add the widget content to the processed content
      processedContent += content;
    }
    
    // Handle HTML elements for GitHub compatibility
    // Remove style and class attributes (which GitHub sanitizes)
    processedContent = processedContent.replace(/<([a-z][a-z0-9]*)\s+class="[^"]*">/gi, '<$1>');
    processedContent = processedContent.replace(/<([a-z][a-z0-9]*)\s+style="[^"]*">/gi, '<$1>');
    processedContent = processedContent.replace(/<([a-z][a-z0-9]*)\s+id="[^"]*">/gi, '<$1>');
    
    // Preserve divs and other elements that GitHub allows, but clean attributes
    // Don't remove the divs or images, but ensure they only have allowed attributes like 'align'
    
    try {
      // Apply additional GitHub-compatible formatting from utility
      processedContent = convertToGitHubCompatible(processedContent);
    } catch (error) {
      console.error('Error converting to GitHub compatible format:', error);
    }
    
    return processedContent;
  };

  // The final content to render
  const renderedContent = isGithubStyle ? prepareGithubCompatibleContent(content) : content;
      
  return (
    <div className={`relative ${isFullscreen ? 'fixed inset-0 z-50 bg-gray-50 dark:bg-gray-900' : ''} ${className}`}>
      {/* Header toolbar - GitHub Style */}
      <div className="z-10 sticky top-0 flex items-center justify-between px-4 py-2.5 bg-[#f6f8fa] dark:bg-[#161b22] border-b border-gray-200 dark:border-gray-700">
        <div className="flex items-center space-x-4">
          <button 
            onClick={toggleSidebar}
            className="text-gray-600 hover:text-gray-800 dark:text-gray-400 dark:hover:text-gray-200 p-1.5 rounded hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors"
            title="Show options"
          >
            <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6h16M4 12h16M4 18h16" />
            </svg>
          </button>
          <div className="text-sm font-medium text-gray-700 dark:text-gray-300 flex items-center">
            <svg className="w-5 h-5 mr-2" viewBox="0 0 16 16" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
              <path fillRule="evenodd" d="M3 5h4v1H3V5zm0 3h4V7H3v1zm0 2h4V9H3v1zm11-5h-4v1h4V5zm0 2h-4v1h4V7zm0 2h-4v1h4V9zm2-6v9c0 .55-.45 1-1 1H9.5l-1 1-1-1H2c-.55 0-1-.45-1-1V3c0-.55.45-1 1-1h5.5l1 1 1-1H15c.55 0 1 .45 1 1zm-8 .5L7.5 3H2v9h6V3.5zm7-.5H9.5l-.5.5V12h6V3z" />
            </svg>
            <span className="font-semibold">README Preview</span>
          </div>
          
          {isGithubStyle && (
            <span className="text-xs py-1 px-2 rounded-full bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200 font-medium">
              GitHub-Compatible Mode
            </span>
          )}
        </div>
        
        <div className="flex space-x-3">
          <button 
            onClick={toggleFullscreen}
            className="text-gray-600 hover:text-gray-800 dark:text-gray-400 dark:hover:text-gray-200 p-1.5 rounded hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors"
            title={isFullscreen ? "Exit fullscreen" : "View fullscreen"}
          >
            {isFullscreen ? (
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
              </svg>
            ) : (
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 8V4m0 0h4M4 4l5 5m11-1V4m0 0h-4m4 0l-5 5M4 16v4m0 0h4m-4 0l5-5m11 5v-4m0 4h-4m4 0l-5-5" />
              </svg>
            )}
          </button>
        </div>
      </div>
      
      {/* Main content with sidebar and preview */}
      <div className="flex h-[calc(100%-44px)]">
        {/* Sidebar */}
        <div 
          className={`bg-white dark:bg-gray-900 border-r border-gray-200 dark:border-gray-700 w-64 transition-all duration-300 ease-in-out transform ${
            sidebarOpen ? 'translate-x-0' : '-translate-x-full'
          } ${isFullscreen ? 'fixed z-50 h-[calc(100%-44px)]' : 'h-full'}`}
        >
          <div className="p-4">
            <h3 className="text-lg font-semibold text-gray-800 dark:text-white mb-4">Display Options</h3>
            
            <div className="space-y-4">
              {/* GitHub style toggle */}
              <div className="flex items-center justify-between">
                <label className="text-sm text-gray-700 dark:text-gray-300">GitHub Style</label>
                <button 
                  onClick={toggleStyle}
                  className={`relative inline-flex h-6 w-11 items-center rounded-full ${isGithubStyle ? 'bg-blue-600' : 'bg-gray-200 dark:bg-gray-700'}`}
                >
                  <span className={`${isGithubStyle ? 'translate-x-6' : 'translate-x-1'} inline-block h-4 w-4 transform rounded-full bg-white transition`} />
                </button>
              </div>
              
              {/* Dark mode toggle */}
              <div className="flex items-center justify-between">
                <label className="text-sm text-gray-700 dark:text-gray-300">Dark Mode</label>
                <button 
                  onClick={toggleDarkMode}
                  className={`relative inline-flex h-6 w-11 items-center rounded-full ${isDarkTheme ? 'bg-blue-600' : 'bg-gray-200 dark:bg-gray-700'}`}
                >
                  <span className={`${isDarkTheme ? 'translate-x-6' : 'translate-x-1'} inline-block h-4 w-4 transform rounded-full bg-white transition`} />
                </button>
              </div>
              
              {/* Full screen toggle */}
              <div className="flex items-center justify-between">
                <label className="text-sm text-gray-700 dark:text-gray-300">Full Screen</label>
                <button 
                  onClick={toggleFullscreen}
                  className={`relative inline-flex h-6 w-11 items-center rounded-full ${isFullscreen ? 'bg-blue-600' : 'bg-gray-200 dark:bg-gray-700'}`}
                >
                  <span className={`${isFullscreen ? 'translate-x-6' : 'translate-x-1'} inline-block h-4 w-4 transform rounded-full bg-white transition`} />
                </button>
              </div>
              
              {/* Widget Grid Layout toggle */}
              <div className="flex items-center justify-between">
                <label className="text-sm text-gray-700 dark:text-gray-300">Grid Layout</label>
                <button 
                  onClick={() => setUseGridLayout(!useGridLayout)}
                  className={`relative inline-flex h-6 w-11 items-center rounded-full ${useGridLayout ? 'bg-blue-600' : 'bg-gray-200 dark:bg-gray-700'}`}
                >
                  <span className={`${useGridLayout ? 'translate-x-6' : 'translate-x-1'} inline-block h-4 w-4 transform rounded-full bg-white transition`} />
                </button>
              </div>
              
              {/* Grid Columns selector (only shown when grid layout is enabled) */}
              {useGridLayout && (
                <>
                  <div className="mt-2">
                    <label className="block text-sm text-gray-700 dark:text-gray-300 mb-2">Grid Columns</label>
                    <div className="flex space-x-2">
                      {[1, 2, 3].map(cols => (
                        <button
                          key={cols}
                          onClick={() => setGridColumns(cols as GridColumns)}
                          className={`flex-1 py-1.5 px-3 text-sm rounded ${
                            gridColumns === cols
                              ? 'bg-blue-600 text-white'
                              : 'bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-gray-200'
                          }`}
                        >
                          {cols}
                        </button>
                      ))}
                    </div>
                  </div>
                  
                  {/* Equal height toggle for widgets */}
                  <div className="flex items-center justify-between mt-4">
                    <label className="text-sm text-gray-700 dark:text-gray-300">Equal Height Widgets</label>
                    <button 
                      onClick={() => setEqualHeight(!equalHeight)}
                      className={`relative inline-flex h-6 w-11 items-center rounded-full ${equalHeight ? 'bg-blue-600' : 'bg-gray-200 dark:bg-gray-700'}`}
                    >
                      <span className={`${equalHeight ? 'translate-x-6' : 'translate-x-1'} inline-block h-4 w-4 transform rounded-full bg-white transition`} />
                    </button>
                  </div>
                </>
              )}

              {/* GitHub Compatibility Information */}
              <div className="mt-6 p-3 bg-yellow-50 dark:bg-yellow-900/30 rounded-md border border-yellow-200 dark:border-yellow-700">
                <h4 className="text-sm font-medium text-yellow-800 dark:text-yellow-300 flex items-center">
                  <svg className="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                    <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a.75.75 0 000 1.5h.253a.25.25 0 01.244.304l-.459 2.066A1.75 1.75 0 0010.747 15H11a.75.75 0 000-1.5h-.253a.25.25 0 01-.244-.304l.459-2.066A1.75 1.75 0 009.253 9H9z" clipRule="evenodd" />
                  </svg>
                  GitHub Markdown Limitations
                </h4>                <p className="text-xs text-yellow-700 dark:text-yellow-400 mt-1">
                  GitHub selectively sanitizes HTML, allowing elements like &lt;div&gt; and &lt;img&gt; but removing style, class and id attributes. This preview uses both markdown tables and GitHub-allowed HTML elements.
                </p>
              </div>
            </div>
          </div>
        </div>
        
        {/* Overlay when sidebar is open (on smaller screens) */}
        {sidebarOpen && (
          <div 
            className="fixed inset-0 bg-black bg-opacity-50 z-40 lg:hidden"
            onClick={toggleSidebar}
          />
        )}
        
        {/* Markdown content */}
        <div 
          className={`flex-grow overflow-auto bg-gray-50 dark:bg-gray-900 ${
            isFullscreen ? 'w-full' : maxHeight
          }`}
        >
          <div className={`${isFullscreen ? 'max-w-5xl mx-auto my-8 px-4' : 'p-4'}`}>
            <div className={`${githubWrapperClasses}`}>
              <div className={`${githubContentClasses} prose dark:prose-invert max-w-none 
                ${isFullscreen ? 'md:text-lg' : ''} 
                ${useGridLayout ? 'markdown-grid-layout' : ''}
                ${useGridLayout && equalHeight ? 'markdown-equal-height' : ''}
                prose-headings:border-b prose-headings:border-gray-200 dark:prose-headings:border-gray-700 
                prose-headings:pb-2 prose-headings:font-semibold prose-h1:text-2xl prose-h2:text-xl 
                prose-headings:scroll-mt-20 prose-img:my-8 prose-img:rounded-md
                prose-a:text-blue-600 dark:prose-a:text-blue-400 prose-a:no-underline prose-a:font-normal hover:prose-a:underline
                prose-p:leading-relaxed prose-p:my-4 prose-blockquote:border-l-4 prose-blockquote:border-gray-300 
                dark:prose-blockquote:border-gray-700 prose-blockquote:pl-4 prose-blockquote:italic 
                prose-blockquote:text-gray-700 dark:prose-blockquote:text-gray-300 prose-blockquote:font-normal
                prose-code:px-1 prose-code:py-0.5 prose-code:rounded prose-code:bg-gray-100 dark:prose-code:bg-gray-800
                prose-pre:bg-gray-50 dark:prose-pre:bg-gray-800 prose-pre:p-0 prose-pre:rounded-md
                prose-hr:border-gray-200 dark:prose-hr:border-gray-800`}
                style={useGridLayout ? { '--grid-columns': gridColumns } as React.CSSProperties : undefined}
              >
                <ReactMarkdown
                  remarkPlugins={[remarkGfm, remarkMath]}
                  rehypePlugins={[rehypeKatex, [rehypeRaw, { passThrough: [] }], rehypeSanitize]}
                  components={{
                    code: ({ node, inline, className, children, ...props }: CodeBlockProps) => {
                      const match = /language-(\w+)/.exec(className || '');
                      
                      return !inline && match ? (
                        <SyntaxHighlighter
                          style={isDarkTheme ? vscDarkPlus : oneLight}
                          language={match[1]}
                          PreTag="div"
                          {...props}
                          className="text-[14px] rounded-md overflow-hidden !bg-gray-50 dark:!bg-gray-800 !my-6"
                          showLineNumbers={true}
                          customStyle={{
                            margin: '1.5rem 0',
                            padding: '1rem',
                            borderRadius: '6px',
                            fontSize: isFullscreen ? '16px' : '14px',
                          }}
                        >
                          {String(children).replace(/\n$/, '')}
                        </SyntaxHighlighter>
                      ) : (
                        <code className={`${className} font-mono text-sm px-1 py-0.5 rounded bg-gray-100 dark:bg-gray-800`} {...props}>
                          {children}
                        </code>
                      );
                    },
                    
                    img: ({ src, alt, ...props }) => {
                      // Always display images for widgets centered and nicely formatted
                      if (typeof src === 'string' && (
                        src.includes('github-readme-stats.vercel.app') || 
                        src.includes('github-profile-trophy.vercel.app') ||
                        src.includes('github-readme-streak-stats.herokuapp.com')
                      )) {
                        return (
                          <div className="relative my-6 overflow-hidden rounded-md border border-gray-200 dark:border-gray-700 flex justify-center">
                            <Image
                              src={src}
                              alt={alt || 'GitHub Stats'}
                              width={600}
                              height={250}
                              className="rounded-md max-w-full"
                              priority={true}
                              unoptimized={true}
                            />
                          </div>
                        );
                      }
                      
                      // Handle regular images
                      if (typeof src === 'string') {
                        return (
                          <div className="relative my-6 overflow-hidden rounded-md border border-gray-200 dark:border-gray-700 flex justify-center">
                            <Image
                              src={src}
                              alt={alt || ''}
                              width={700}
                              height={350}
                              className="rounded-md max-w-full"
                              unoptimized={true}
                            />
                          </div>
                        );
                      }
                      return null;
                    },
                    
                    table({ children, ...props }) {
                      return (
                        <div className="my-6 overflow-x-auto border border-gray-200 dark:border-gray-700 rounded-md">
                          <table className="min-w-full divide-y divide-gray-300 dark:divide-gray-700" {...props}>
                            {children}
                          </table>
                        </div>
                      );
                    },
                    
                    th({ children, ...props }) {
                      return (
                        <th className="bg-gray-50 dark:bg-gray-800 px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider" {...props}>
                          {children}
                        </th>
                      );
                    },
                    
                    td({ children, ...props }) {
                      return (
                        <td className="px-4 py-3 text-sm border-t border-gray-200 dark:border-gray-700" {...props}>
                          {children}
                        </td>
                      );
                    },
                  }}
                >
                  {renderedContent}
                </ReactMarkdown>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default MarkdownRenderer;
